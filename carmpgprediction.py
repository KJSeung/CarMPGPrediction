# -*- coding: utf-8 -*-
"""CarMPGPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1niRN1hpytjaft6U1VWKokcAWOUXi7dxj
"""

import numpy as np
import pandas as pd
from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential
from keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from keras.optimizers import Adam

# 데이터 로드
df = pd.read_csv("/content/CarDataSets.csv", sep=',')

# NaN 값 확인 및 제거 (안정성을 위해 추가)
df.dropna(inplace=True)
df.reset_index(drop=True, inplace=True)

X = df.drop(columns=['MPG_Highway'])
y = df[['MPG_Highway']]

# X와 y에 대해 각각 스케일러를 적용
scaler_X = MinMaxScaler()

# 스케일러 미적용시 값의 크기로 인해 NaN 오류 발생
scaler_y = MinMaxScaler()

X_scaled = scaler_X.fit_transform(X)
y_scaled = scaler_y.fit_transform(y)

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.3, shuffle=True)

# Test1
# model = keras.models.Sequential()
# model.add(keras.layers.Dense(16, activation='relu', input_shape=(X_train.shape[1],)))
# model.add(keras.layers.Dense(8, activation='relu'))
# model.add(keras.layers.Dense(1))

# Test2
# model = keras.models.Sequential()
# model.add(keras.layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)))
# model.add(keras.layers.Dense(16, activation='relu'))
# model.add(keras.layers.Dense(1))

# Test3
model = keras.models.Sequential()
model.add(keras.layers.Dense(32, activation='relu', input_shape=(X_train.shape[1],)))
model.add(keras.layers.Dense(16, activation='relu'))
model.add(keras.layers.Dense(8, activation='relu'))
model.add(keras.layers.Dense(1))

model.compile(loss='mse',
              optimizer='adam', # 또는 위에서 정의한 optimizer
              metrics=['mse'])

# 20회 이상 결과가 향상되지 않으면 자동으로 중단되게끔 합니다.
early_stopping_callback = EarlyStopping(monitor='val_loss', patience=20)

# 모델의 이름을 정합니다.
# modelpath='/content/Test1.keras'
# modelpath='/content/Test2.keras'
modelpath='/content/Test3.keras'

# 최적화 모델을 업데이트하고 저장합니다.
checkpointer = ModelCheckpoint(filepath=modelpath, monitor='val_loss', verbose=1, save_best_only=True)

# 실행 관련 설정을 하는 부분입니다. 전체의 20%를 검증셋으로 설정합니다.
history = model.fit(X_train, y_train, validation_split=0.25, epochs=2000, batch_size=32, callbacks=[early_stopping_callback, checkpointer])

# 테스트 결과를 출력합니다.
score=model.evaluate(X_test, y_test)
print('Test MSE:', score[1])

score=model.evaluate(X_test, y_test)
print('Test accuracy:', score)

idx=X_test.shape[0]
pred=model.predict(X_test)

for i in range(idx):
   print(f"예측: {pred[i]}, 실제: {y_test[i]}")